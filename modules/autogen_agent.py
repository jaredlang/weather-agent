from autogen import AssistantAgent, UserProxyAgent, config_list_from_json
import autogen

from os import environ

from modules.txt2image_repl import create_image, review_image

OUTPUT_FOLDER = environ["OUTPUT_FOLDER"]

autogen_config_list = config_list_from_json(env_or_file="OAI_CONFIG_LIST")
# Create llm config for group chat manager 
# - GroupChatManager is not allowed to make function/tool calls.
autogen_llm_config = {
    "config_list": autogen_config_list
}

# Create llm config for assistants
autogen_llm_config_assistants = {
    "functions": [
        {
            "name": "text_to_image_generation",
            "description": "use latest AI model to generate image based on a prompt, return the file path of image generated",
            "parameters": {
                    "type": "object",
                    "properties": {
                        "prompt": {
                            "type": "string",
                            "description": "a great text to image prompt that describe the image",
                        }
                    },
                "required": ["prompt"],
            },
        },
        {
            "name": "image_review",
            "description": "review & critique the AI generated image based on original prompt, decide how can images & prompt can be improved",
            "parameters": {
                    "type": "object",
                    "properties": {
                        "prompt": {
                            "type": "string",
                            "description": "the original prompt used to generate the image",
                        },
                        "image_file_path": {
                            "type": "string",
                            "description": "the image file path, make sure including the full file path & file extension",
                        }
                    },
                "required": ["prompt", "image_file_path"],
            },
        },
    ],
    "config_list": autogen_config_list
}

# Create assistant agent
graphic_designer = AssistantAgent(
    name="graphic_designer",
    # system_message="You are a text to image AI model expert, you will use text_to_image function to generate image with prompt provided, and also improve prompt based on feedback provided until it is 10/10.",
    system_message="""Graphic Designer. You are a helpful assistant highly skilled in creating an image to reflect a text description. 
You MUST try every way to create an image to visualize the description. 
If you are not familiar with the description, you use the stocked images and modify them to represent the description. 
You should continue creating images until the graphic_critic gives an average score higher than 9. 
""", 
    llm_config=autogen_llm_config_assistants,
    function_map={
        "create_image": create_image
    }
)

graphic_critic = AssistantAgent(
    name="graphic_critic",
    # system_message="You are an AI image critique, you will use img_review function to review the image generated by the text_to_img_prompt_expert against the original prompt, and provide feedback on how to improve the prompt.",
     system_message="""Critic. You are a helpful assistant highly skilled in evaluating the quality of a given image code by providing a score from 1 (bad) - 10 (good). Specifically, you can carefully evaluate the image across the following dimensions
- Content (content): Does the image present the content in the prompt? If any content is missing, the score must less than 5. 
- Clarity (clarity): Does the image clearly communicate the prompt? Is it easy to understand for the human viewers?
- Balance and proportion (proportion): Are the elements arranged in a visually pleasing and harmonious way?
- Color and typography (color): Are the colors and fonts used effectively to enhance the message and brand identity?

YOU MUST PROVIDE A SCORE for each of the above dimensions.
{content: 0, clarity: 0, proportion: 0, color: 0}
Finally, based on the critique above, suggest a concrete list of actions that the Graphic Designer should take to improve the image.
""",
    llm_config=autogen_llm_config_assistants,
    function_map={
        "review_image": review_image
    }
)

# Create user proxy agent
user_proxy = UserProxyAgent(
    name="user_proxy",
    human_input_mode="TERMINATE", # "ALWAYS"
    max_consecutive_auto_reply=10,
    code_execution_config={
        "work_dir": "weather",
        "use_docker": False,
    }
)

# Create groupchat
groupchat = autogen.GroupChat(
    agents=[user_proxy, graphic_designer, graphic_critic], messages=[], max_round=10,)

manager = autogen.GroupChatManager(
    groupchat=groupchat,
    llm_config=autogen_llm_config)
